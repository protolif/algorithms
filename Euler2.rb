# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
#
# Load our handy math library
$LOAD_PATH << './lib'
require 'HandyMath'

class Euler2
  using HandyMath
  def initialize
    # assign a variable called answer
    answer = 0
    # select for even fibonacci numbers
    even_fibonacci = compute_fibonacci.select { |n| n % 2 == 0 }
    # the answer is the sum of the values
    even_fibonacci.each { |w| answer += w }
    # output the answer to the command line
    puts "Answer: #{answer}"
  end
  
  def compute_fibonacci(limit = 4000000)
    set = [0,1]
    while set.last < limit do
      y = set.length - 2
      z = set[y] + set.last
      set.push(z)
    end
    return set# an array of fibonacci numbers
  end
end

Euler2.new
